-- Tabela Clientes
CREATE TABLE clientes (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    cpf_cli VARCHAR(11) NOT NULL,
    nome_cli VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    tel_cli VARCHAR(11),
    password VARCHAR(100) NOT NULL,
    data_nasc_cli DATE NOT NULL
);

-- Tabela Endereços
CREATE TABLE enderecos (
    id_end INT(10) AUTO_INCREMENT PRIMARY KEY,
    id_cli BIGINT UNSIGNED NOT NULL,
    cep VARCHAR(8) NOT NULL,
    numero INT(5) NOT NULL,
    complemento TEXT,
    FOREIGN KEY (id_cli) REFERENCES clientes(id)
);

-- Tabela Carrinhos
CREATE TABLE carrinhos (
    id_carrinho INT(10) AUTO_INCREMENT PRIMARY KEY,
    id_cli BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY (id_cli) REFERENCES clientes(id)
);

-- Tabela Categorias
CREATE TABLE categorias (
    id_categoria INT(10) AUTO_INCREMENT PRIMARY KEY,
    nome_categoria VARCHAR(50) NOT NULL
);

-- Tabela Fornecedores
CREATE TABLE fornecedores (
    id_fornecedor INT(10) AUTO_INCREMENT PRIMARY KEY,
    nome_fornecedor VARCHAR(50) NOT NULL,
    email_fornecedor VARCHAR(100) NOT NULL
);


-- Tabela Produtos
CREATE TABLE produtos (
    id_produto INT(10) AUTO_INCREMENT PRIMARY KEY,
    id_categoria INT(10),
    nome_produto VARCHAR(100) NOT NULL,
    desc_produto TEXT NOT NULL,
    foto_produto VARCHAR(255) NOT NULL,
    preco_produto DECIMAL(8, 2) NOT NULL,
    FOREIGN KEY (id_categoria) REFERENCES categorias(id_categoria)
);

-- Tabela Itens de Venda
CREATE TABLE itens_venda (
    id_item INT(20) AUTO_INCREMENT PRIMARY KEY,
    id_carrinho INT(10) NOT NULL,
    id_produto INT(10) NOT NULL,
    quantidade_item INT(5),
    FOREIGN KEY (id_carrinho) REFERENCES carrinhos(id_carrinho),
    FOREIGN KEY (id_produto) REFERENCES produtos(id_produto)
);

-- Tabela Vendas
CREATE TABLE vendas (
    id_venda INT(10) AUTO_INCREMENT PRIMARY KEY,
    id_carrinho INT(10) NOT NULL,
    pagamento_venda INT(2) NOT NULL,
    entrega_venda INT(2) NOT NULL,
    data_venda datetime NOT NULL,
    FOREIGN KEY (id_carrinho) REFERENCES carrinhos(id_carrinho)
);

-- Tabela Estoques
CREATE TABLE estoques (
    id_estoque INT(10) AUTO_INCREMENT PRIMARY KEY,
    id_produto INT(10) NOT NULL,
    qntd_estoque INT(6) NOT NULL,
    estoque_min INT(6),
    estoque_max INT(6),
    FOREIGN KEY (id_produto) REFERENCES produtos(id_produto)
);

-- Tabela Compras
CREATE TABLE compras (
    id_compra INT(10) AUTO_INCREMENT PRIMARY KEY,
    id_produto INT(10) NOT NULL,
    id_fornecedor INT(10) NOT NULL,
    qntd_compra INT(6) NOT NULL,
    data_compra datetime NOT NULL,
    preco_uni_compra DECIMAL(8, 2) NOT NULL,
    data_venc datetime,
    FOREIGN KEY (id_produto) REFERENCES produtos(id_produto),
    FOREIGN KEY (id_fornecedor) REFERENCES fornecedores(id_fornecedor)
);

-- Tabela Funcionários
CREATE TABLE funcionarios (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nome_func VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL
);

-- Tabela Logins
CREATE TABLE logins (
    id_login INT(10) AUTO_INCREMENT PRIMARY KEY,
    id_func BIGINT UNSIGNED NOT NULL,
    data_login datetime NOT NULL,
    FOREIGN KEY (id_func) REFERENCES funcionarios(id)
);

-- Tabela Produto Updates
CREATE TABLE produto_updates (
    id_prod_up INT(10) AUTO_INCREMENT PRIMARY KEY,
    id_produto INT(10) NOT NULL,
    nome_prod_up VARCHAR(50),
    desc_prod_up TEXT,
    preco_prod_up DECIMAL(8, 2),
    data_prod_up datetime NOT NULL,
    FOREIGN KEY (id_produto) REFERENCES produtos(id_produto)
);

-- Índice para melhorar o desempenho da pesquisa pelo nome do cliente
CREATE INDEX idx_nome_cliente ON clientes(nome_cli);

-- Índice para melhorar o desempenho ao pesquisar pela data de nascimento do cliente
CREATE INDEX idx_data_nasc_cliente ON clientes(data_nasc_cli);

-- Índice para melhorar o desempenho ao pesquisar o produto pelo nome
CREATE INDEX idx_nome_produto ON produtos(nome_produto);

-- Índice para melhorar o desempenho ao pesquisar vendas pela data
CREATE INDEX idx_data_venda ON vendas(data_venda);

-- Índice para melhorar o desempenho ao verificar os dados de login dos clientes
CREATE INDEX idx_login_cliente ON clientes(email, password);

-- Índice para melhorar o desempenho ao verificar os dados de login dos funcionários
CREATE INDEX idx_login_funcionarios ON funcionarios(email, password);

-- Trigger para atualizar o estoque após venda
DELIMITER $$
CREATE TRIGGER atualiza_estoque_venda
AFTER INSERT ON vendas
FOR EACH ROW
BEGIN
    UPDATE estoques e
    JOIN itens_venda iv ON e.id_produto = iv.id_produto
    SET e.qntd_estoque = e.qntd_estoque - iv.quantidade_item
    WHERE iv.id_carrinho = NEW.id_carrinho;
END$$
DELIMITER ;

-- Trigger para atualizar o estoque quando o produto for comprado
DELIMITER $$
CREATE TRIGGER atualiza_estoque_compra
AFTER INSERT ON compras
FOR EACH ROW
BEGIN
    UPDATE estoques e
    SET e.qntd_estoque = e.qntd_estoque + NEW.qntd_compra    
    WHERE e.id_produto = NEW.id_produto;
END$$
DELIMITER ;

-- Trigger para fazer auditoria do update dos produtos 
DELIMITER $$
CREATE TRIGGER auditoria_update_produtos
BEFORE UPDATE ON produtos
FOR EACH ROW 
BEGIN
INSERT INTO produto_updates 
SET	id_produto = OLD.id_produto,
nome_prod_up = OLD.nome_produto,
desc_prod_up = OLD.desc_produto,
preco_prod_up = OLD.preco_produto,
data_prod_up = NOW();
END$$
DELIMITER ;

-- Trigger para excluir a referência de um produto na tabela produto_updates e na estoques 
DELIMITER $$

CREATE TRIGGER depois_delete_produto
BEFORE DELETE ON produtos
FOR EACH ROW
BEGIN
    DELETE FROM produto_updates WHERE id_produto = OLD.id_produto;
DELETE FROM estoques WHERE id_produto = OLD.id_produto;
END$$
DELIMITER ;

-- Trigger para criar um estoque para o produto
DELIMITER $$
CREATE TRIGGER cria_estoque
AFTER INSERT ON produtos
FOR EACH ROW
BEGIN
    INSERT INTO estoques (id_produto, qntd_estoque) VALUES (NEW.id_produto, 0);
END$$
DELIMITER ;
